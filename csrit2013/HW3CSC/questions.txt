Homework 3: Basic Debugging with GDB

Name: Ryan Vogt

Instructions
------------

These questions deal with the simple symbol table program found in
the file "sym.c".  Compile it with the options "-Wall -ggdb -std=c99"
for testing.

Some questions ask you to compare information printed by gdb with the
contents of the data files being processed.  You may find it helpful to
have a second shell window open; run gdb in the first window, and execute
other commands (such as 'more', or an editor) in the second window. Place
your answers between the lines provided for each quesion.

Questions
---------

1. Run 'sym', redirecting the standard input from the file named 'data1'.
Compare the output from the program to the contents of the file 'data1'.
Does the program appear to be operating correctly?  Explain why or why
not.
Yes, the program first reads in a c string then looks for a number to assign that string with in the symbol table, the data1 file is the input to create this symbol table. Because there exists pairs such that there is a string followed by number it is working correctly

2. Run 'sym' again, this time redirecting the standard input from the
file named 'data2'.  What happens?

A segementation fault(core dumped) issue occurs.

3. Run gdb on the program with the command "gdb sym".  At the "(gdb)"
prompt, enter the gdb command "run < data2" to run 'sym' with input
redirected from the 'data2' file.  What line of code is being executed
when the program generated a segmentation fault?

The code which causes the issue is table[index].value = value;

4. Use the gdb 'where' command to print a trace of function calls.

   a. What were the actual parameters that were given to add_to_table()?

       the string whines and the int value 1578 were passed

   b. From what line in main() was the function called?

a)a string which contains whines and value which is an int containting 1578
b)138
5. Use the gdb 'print' command to print some program variables.

   a. Print the 'index' variable with the command 'print index'.  What is
   its value?

   333

   b. Try to print the table entry being modified,'table[index]'.  What
   happens?

  the memory cannot be refrenced

   c. Look at the definition of the variable 'table' in the file 'sym.c'.
   How many symbols is the array designed to hold?

 5
   d. Print the global variable 'table' itself.  How many symbols are
   stored in the table?
 5
6. Use the gdb 'continue' command to terminate the process in which 'sym'
is running.  Next, type "watch index" to set a watchpoint on the global
variable 'index'.  (Watchpoints cause gdb to pause the execution of the
program whenever the variable being watched is changed.)  Re-run 'sym'
with the gdb command "run < data2".

   a.  What happens?

 increments the variable and checks if this caused issues within the program

   b.  What value is now in the variable 'index'?

  1

   c.  Use the 'continue' command to resume the execution of 'sym'.
   What value is in 'index' now?

 2

7.  Use the 'continue' command five more times, then answer this question.

   a.  What actual parameters were given to the add_to_table() function
   this time?

 evident and 4190

   b.  Into which element of 'table' was this data stored?  (Careful -
   remember that you don't see the value of 'index' until after it has
   been changed!)

  6
   c.  Print the contents of 'table'.  How many items are stored there?

   5
   d.  Execute the gdb command "print table[5]" and then "print table[6]".
   What is printed?
(gdb) print table[5]
$3 = {name = "dopes\000\000", value = 2859}
(gdb) print table[6]
$4 = {name = "evident", value = 4190}


   e.  Explain the difference between your answer to (c) and (d) above.
   Where is the data that was displayed in part (d) stored in memory?

table itself was declared and put on the stack, however when you go past the allocated space for this table you then edit things that are on the stack but other variable values. Which can caused unneeded characteristics
8. Exit from gdb by entering the 'quit' command; if you are asked the
question "Quit anyway?", enter 'y'.  Run gdb on 'sym' again, this time
redirecting the standard input from the file named 'data3'.  Does the
output of the program match the data that was read in?  If not, what
is different?

No, in the file has 
 August
31
September
30
October
31
November
30
December
31
the output is 
Contents of symbol table:
  0:  'August', 31
  1:  'September', 114
  2:  'October', 31
  3:  'November', 0
  4:  'December', 0

This isnt how the program is intended to behave.
9. At the "(gdb)" prompt, enter the command "break add_to_table"
to set a breakpoint at the beginning of the add_to_table() function.
(Breakpoints, like watchpoints, cause gdb to pause the execution of the
program, but this time whenever the specified function is called during
execution.) Re-run the program with the gdb command "run"; gdb will
remember that you redirected the standard input to come from 'data3',
and will automatically do that again.  What actual parameters were given
to add_to_table() when it was called?

Augest and 31
10. Use the gdb 'continue' command again.

   a. Print the global 'table' variable.  What symbol(s) have been stored
   in the table?

Augest has been stored with the value 31
   
   b. What symbol is being stored in the table this time, and what 
   integer value is being stored with it?

 September and 30
   
11. Use the gdb 'continue' command again.  Print the contents of the
second entry in the table with the command "print table[1]".  What data
was placed in that table entry, and how does it compare to the data that
was given to add_to_table() in the previous call?

The symbol is correct, however instead of the value 30 being associated with it, the value 114 is placed with it. Which is different than the previous call because the symbol was assosciated with the correct value from input. 
    
12. Use the gdb 'continue' command again; you should see a call to
add_to_table("November",30).  Enter the gdb 'list' command to display the
next 10 lines of the program that will be executed.  What value is
currently in the variable 'index'?

 3

13. Use the gdb 'step' command to execute one C statement.  Print the
contents of 'table[index]'.  What has been placed in the current table
entry?

no symbol, but a value of 30 exists with this no symbol.
14. Use the gdb 'step' three more times.  Print 'table[index]'.  What has
now been placed in the table entry?

An N is placed in front of the null characters with an value of 30 placed with it.

15. Use the gdb command 'step 14', which executes 14 C statements
(instead of just one).  Print 'table[index]'.  What data is currently
held in this entry in the table (both values)?

The symbol November and the value 30 is in this element.

16. Use the gdb command 'step' to execute one C statement.

   a.  What value is now in 'index'?
  3

   b.  Print 'table[index]' to print the completed table entry.
   What is now held in that table entry (both values)?
 November has been assinged the value of 0

17. Look at the definition of the 'symbol' structure in 'sym.c'.  Given
that definition, and what your observation of the copying of data into
the current table entry, explain why the results from executing the
command "sym < data3" do not match the expected results.
        
The reason is because some months names are longer than 8 character long, this causes you to write further than the memory you have allocated. As a result you get these behaviors.
