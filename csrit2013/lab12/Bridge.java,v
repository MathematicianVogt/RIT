head	1.4;
access;
symbols;
locks
	rhv5251:1.4; strict;
comment	@# @;


1.4
date	2013.11.18.15.37.47;	author rhv5251;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.18.14.54.31;	author rhv5251;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.18.14.53.43;	author rhv5251;	state Exp;
branches;
next	1.1;

1.1
date	2013.11.18.14.52.38;	author rhv5251;	state Exp;
branches;
next	;


desc
@done.
@


1.4
log
@done.
@
text
@    /*
    * Bridge.java
    *
    * Version:
    *     $Id: Bridge.java,v 1.3 2013/11/18 14:54:31 rhv5251 Exp rhv5251 $
    *
    * Revisions:
    *     $Log: Bridge.java,v $
    *     Revision 1.3  2013/11/18 14:54:31  rhv5251
    *     done
    *
    */
 
    /*
    *@@Author Ryan Vogt
    *A class to represent a Bridge to
    *be crossed
    */
    
    
   
    import java.util.concurrent.Semaphore;
    public class Bridge
    {   //class variables
        private Semaphore thisLock;
	    //class contstructor
	    public Bridge(int maxWoolieNumber)
	    {
		    thisLock=new Semaphore(maxWoolieNumber);
		   
		
		
	    }
	    //locks the bridge so only 'n' troll can
	    //travel
	    public void enterBridge() throws InterruptedException
	    {
		    thisLock.acquire();
		
		
		
	    }
	    //unlocks the bridge so another troll
	    //can cross up to max of n trolls
	    public void leaveBridge()
	    {
		
		    thisLock.release();
	    }
	
    }
@


1.3
log
@done
@
text
@d5 1
a5 1
    *     $Id$
d8 4
a11 1
    *     $Log$
d21 2
a22 1
    import java.util.concurrent.locks.ReentrantLock;
d24 4
a27 4
    {  
    private ReentrantLock thisLock;
	
	    public Bridge()
d29 2
a30 1
		    thisLock=new ReentrantLock();
d34 3
a36 1
	    public void enterBridge()
d38 1
a38 6
		    synchronized(thisLock)
		    {
		
		        thisLock.lock();
		
		    }
d43 2
d48 1
a48 1
		    thisLock.unlock();
@


1.2
log
@done
@
text
@d2 10
@


1.1
log
@Initial revision
@
text
@d1 7
@
