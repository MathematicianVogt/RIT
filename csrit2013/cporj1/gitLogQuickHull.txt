 ebe9bdc5 » MathematicianVogt
2014-03-04 11 		1 	// Author Ryan Vogt
		2 	//An implmentation of the quickhull algorithm to find the convex hull from a set
		3 	//of points P
		4 	//to compile: to compile: gcc -Wall -std=c99 -o point points.c
		5 	#include <stdio.h>
		6 	#include <string.h>
		7 	#include "points.h"
		8 	#include <stdlib.h>
		9 	#include <ctype.h>
		10 	
		11 	
		12 	
		13 	void displayConvexPoints(struct Point points[], int numPoints){
		14 	
		15 	printf("Convex Hull:\n");
		16 	for(int i=0; i<numPoints; i++)
		17 	{
		18 	struct Point currentPointToShow=points[i];
		19 	printf("%c: (%d,%d)\n",currentPointToShow.label,currentPointToShow.x,currentPointToShow.y);
		20 	
		21 	
		22 	}
		23 	
		24 	
		25 	
		26 	}
		27 	
		28 	//take three arrays of certain pieces and combine them together
		29 	//@param bigL array of left elements
		30 	//@param bigLsize the size of bigL
		31 	//@param bigR the array of right elemeents
		32 	//@param bigRsize the size of right eleements array
		33 	//@param f the points furthest from the line
		34 	//@param P the original array of points,
		35 	//@param PSize the size of P
		36 	//@return number of slots filled
		37 	int overridePThree(struct Point bigL[],int bigLSize,struct Point bigR[], int bigRsize, struct Point f, struct Point P[])
		38 	{
11e1ab8a » MathematicianVogt
2014-03-04 13 		39 	int where=0;
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		40 	for(int i=0; i<bigLSize;i++)
		41 	{
		42 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		43 	P[where++]=bigL[i];
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		44 	
		45 	}
11e1ab8a » MathematicianVogt
2014-03-04 13 		46 	P[where++]=f;
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		47 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		48 	for(int i= 0; i<bigRsize; i++)
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		49 	{
		50 	
		51 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		52 	P[where++]=bigR[i];
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		53 	
		54 	
		55 	}
11e1ab8a » MathematicianVogt
2014-03-04 13 		56 	
		57 	//printf("%d Number of threeP\n", where );
		58 	return where;
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		59 	
		60 	}
		61 	//take four arrays of certain pieces and combine them together
		62 	//@param bigL array of left elements
		63 	//@param bigLsize the size of bigL
		64 	//@param bigR the array of right elemeents
		65 	//@param bigRsize the size of right eleements array
		66 	//@param r the most right point
		67 	//@param l the most left point
		68 	//@param P the original array of points,
		69 	//@param PSize the size of P
		70 	//@param the new size of P
		71 	int overridePFour(struct Point l, struct Point bigL[],int bigLSize, struct Point r, struct Point bigR[], int bigRsize, struct Point P[])
		72 	{
11e1ab8a » MathematicianVogt
2014-03-04 13 		73 	int where=0;
		74 	P[where++]=l;
		75 	for(int i =0; i<bigLSize; i++)
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		76 	{
		77 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		78 	P[where++]=bigL[i];
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		79 	
		80 	
		81 	}
11e1ab8a » MathematicianVogt
2014-03-04 13 		82 	
		83 	P[where++]= r;
		84 	for(int i=0; i<bigRsize; i++)
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		85 	{
		86 	
		87 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		88 	P[where++]=bigR[i];
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		89 	
		90 	
		91 	}
		92 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		93 	return where;
		94 	
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		95 	
		96 	}
		97 	
		98 	
		99 	//A method that helps the recurisve quickHull algorithm.
		100 	//@param P, the original set of points
		101 	//@param l the left most point in P
		102 	//@param r the right most point in P
11e1ab8a » MathematicianVogt
2014-03-04 13 		103 	int quickHullRec(struct Point points[], struct Point l, struct Point r, int numPoints)
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		104 	{
11e1ab8a » MathematicianVogt
2014-03-04 13 		105 	
		106 	//printf("ALL THE POINTS\n");
		107 	//displayPoints(points,numPoints);
		108 	
		109 	
		110 	if(numPoints==0)
		111 	{
		112 	
		113 	return 0;
		114 	
		115 	}
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		116 	
		117 	else
		118 	{
		119 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		120 	struct Point f=furthestLeftPoint(l,r,points,numPoints);
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		121 	struct Point L[numPoints];
11e1ab8a » MathematicianVogt
2014-03-04 13 		122 	int Lsize=leftPointSet(l, f, points,numPoints,L);
		123 	//printf("\nL\n");
		124 	//displayPoints(L,Lsize);
6c6aff73 » MathematicianVogt
2014-03-04 12 		125 	struct Point R[numPoints];
11e1ab8a » MathematicianVogt
2014-03-04 13 		126 	int Rsize=leftPointSet(f,r,points,numPoints,R);
		127 	//printf("\nR\n");
		128 	//displayPoints(R,Rsize);
		129 	
		130 	int Lsum= quickHullRec(L,l,f,Lsize);
		131 	int Rsum= quickHullRec(R,f,r,Rsize);
		132 	int size=overridePThree(L,Lsize,R,Rsize,f,points);
		133 	
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		134 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		135 	/*printf("==========dsd\n");
		136 	displayPoints(L,Lsize);
		137 	printf("\n");
		138 	printf("yo");
		139 	displayPoint(f);
		140 	printf("\n");
		141 	displayPoints(R,Rsize);
		142 	printf("\n");
		143 	printf("QUICKHULLREC");
		144 	displayPoints(points,size);
		145 	
		146 	*/
		147 	
bbb3e05b » MathematicianVogt
2014-03-04 GoodforFinal 		148 	return Lsum+Rsum;
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		149 	
		150 	}
		151 	
		152 	
		153 	
		154 	
		155 	}
		156 	
		157 	//A method that does the quickHull algorithm. Takes a set of points and number of points
		158 	//in this set that are valid, find the points in this set and add them to convexHull
		159 	//@param points, the set of points, a subset of these points will be the convex hull
		160 	//@param numPoints, the number of points in points that are valid
		161 	//@param convexHull, this will be manipualted from empty to containing the complex hull
		162 	int quickHull(struct Point points[], struct Point convexHull[],int numPoints)
		163 	{
		164 	
		165 	struct Point mostLeftPoint=leftmostPoint(points,numPoints);
11e1ab8a » MathematicianVogt
2014-03-04 13 		166 	//printf("MOSTLEFT\n");
		167 	//displayPoint(mostLeftPoint);
		168 	
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		169 	struct Point mostRightPoint=rightmostPoint(points,numPoints);
11e1ab8a » MathematicianVogt
2014-03-04 13 		170 	//printf("MOSTRIGHT\n");
		171 	//displayPoint(mostRightPoint);
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		172 	struct Point bigL[numPoints];
11e1ab8a » MathematicianVogt
2014-03-04 13 		173 	
		174 	
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		175 	int bigLnumber=leftPointSet(mostLeftPoint,mostRightPoint,points,numPoints,bigL);
11e1ab8a » MathematicianVogt
2014-03-04 13 		176 	//printf("BIGLNUM %d \n",bigLnumber );
		177 	//printf("BIGL\n");
		178 	//displayPoints(bigL,bigLnumber);
		179 	//printf("BIGLEND\n");
		180 	
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		181 	struct Point bigR[numPoints];
		182 	int bigRnumber=leftPointSet(mostRightPoint,mostLeftPoint,points,numPoints,bigR);
11e1ab8a » MathematicianVogt
2014-03-04 13 		183 	// printf("BIGRNUM %d \n",bigRnumber );
		184 	//printf("BIGR\n");
		185 	//displayPoints(bigR,bigRnumber);
		186 	//printf("BIGREND\n");
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		187 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		188 	int finalL=quickHullRec(bigL,mostLeftPoint,mostRightPoint,bigLnumber);
		189 	int finalR=quickHullRec(bigR,mostRightPoint,mostLeftPoint,bigRnumber);
		190 	int size=overridePFour(mostLeftPoint,bigL,bigLnumber,mostRightPoint,bigR,bigRnumber,convexHull);
		191 	
		192 	//printf("ooverridePF\n");
		193 	//printf("QUICKHULL");
		194 	/*displayPoint(mostLeftPoint);
		195 	printf("\n");
		196 	displayPoints(bigL,bigLnumber);
		197 	printf("\n");
		198 	displayPoint(mostRightPoint);
		199 	printf("\n");
		200 	displayPoints(bigR,bigRnumber);
		201 	printf("\n");
		202 	displayPoints(convexHull,size);
		203 	*/
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		204 	
		205 	
11e1ab8a » MathematicianVogt
2014-03-04 13 		206 	//printf("%d FINAL SUM\n", finalL+finalR );
bbb3e05b » MathematicianVogt
2014-03-04 GoodforFinal 		207 	return size;
ebe9bdc5 » MathematicianVogt
2014-03-04 11 		208 	
		209 	
		210 	
		211 	
		212 	
		213 	
		214 	
		215 	}
		216 	
		217 	
		218 	int main(void)
		219 	{
		220 	
		221 	
		222 	
		223 	
		224 	struct Point quickHullPoints[MAX_POINTS];
		225 	int numberOfquickHullPoints=readPoints(quickHullPoints);
		226 	if(numberOfquickHullPoints>0)
		227 	{
		228 	displayPoints(quickHullPoints,numberOfquickHullPoints);
		229 	struct Point convexHullSet[numberOfquickHullPoints];
		230 	int numberOfConvexPoints=quickHull(quickHullPoints,convexHullSet,numberOfquickHullPoints);
		231 	displayConvexPoints(convexHullSet,numberOfConvexPoints);
		232 	}
		233 	
		234 	
		235 	
		236 	}

